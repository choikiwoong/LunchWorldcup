<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
	<!-- <bean id="customPasswordEncoder" class="org.zerock.security.CustomNoOpPasswordEncoder"></bean> -->
	<!-- 스프링이 제공하는 암호화 클래스를 추가  -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>
	
	
	
	
	<security:http auto-config="true" use-expressions="true">
		<!-- /security/all url에 모든 사용자에게 접근 허용 -->
		<security:intercept-url pattern="/security/all" access="permitAll"/>
		<!-- /security/member url에 ROLE_MEMBER 권한을 가진 사용자만 접근을 허용  -->
		<security:intercept-url pattern="/security/member" access="hasRole('ROLE_MEMBER')"/>
		<!-- /security/admin url에 ROLE_ADMIN 권한을 가진 사용자만 접근을 허용  -->
		<security:intercept-url pattern="/security/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!--<security:form-login/>   security 모듈이 제공하는 로그인폼 -->
		<!-- 로그인이 성공하면 처리할 핸들러를 추가 -->
		<!-- <security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/> -->
		<!-- 나의 디자인에 맞는 로그인폼을 사용하도록 설정 -> 로그인이 성공하면 요청했던 url로 돌아감-->
		<security:form-login login-page="/customLogin"/>
		
		<!-- 403 금지됨을 처리하는 url을 지정  -->
		<!-- <security:access-denied-handler error-page="/accessError"/>  -->
		<security:access-denied-handler ref="customAccessDenied"/>
		<!-- security에서 제공하는 로그아웃 기능을 이용하기 위해 로그아웃 url추가하고 
		로그아웃이 성공하면  세션정보를 삭제하도록(invalidate-session="true") 설정해줌-->
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me,JSESSION_ID"/>
		<!--  1주일 : 7* 24 * 60 * 60 -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
		
	</security:http>
	
	<security:authentication-manager>
		<!-- <security:authentication-provider> -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!--<security:user-service>
				 설정으로 사용자를 추가 
				{noop} : Password Encryption을 적용하지 않음
				
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_MEMBER"/>
			</security:user-service>  -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"
			users-by-username-query="select userid, userpw, enabled from tbl_member where userid = ?"
			authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ?"/>
			 -->
			<!-- <security:password-encoder ref="customPasswordEncoder"/>  -->
			<security:password-encoder ref="bcryptPasswordEncoder"/>			
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
